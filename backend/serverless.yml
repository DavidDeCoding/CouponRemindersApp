service: coupon-reminders

package:
  individually: true

provider:
  name: aws
  runtime: python3.8
  region: us-west-1
  stage: ${opt:stage, "dev"}
  lambdaHashingVersion: "20201221"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["CouponsDynamoDBTable", "Arn"] }
  environment:
    COUPONS_TABLE: ${self:custom.tableName}

functions:
  app:
    package:
      include:
        - "coupon_reminders"
      exclude:
        - "requirements.txt"
        - "package.json"
        - "package-lock.json"
        - ".serverless/**"
        - ".virtualenv/**"
        - "node_modules/**"
        - ".pytest_cache"
        - "tests/**"
        - ".gitignore"
        - "poetry.lock"
        - "pyproject.toml"
        - "README.md"
        - "dist/**"
        - "tesseract/**"
    handler: coupon_reminders.main.handler
    timeout: 60
    environment:
      STAGE: ${self:provider.stage}
    layers:
      - { Ref: TesseractAl2LambdaLayer }
    events:
      - http:
          path: /{proxy+}
          method: any

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
    dockerFile: Dockerfile
  tableName: 'coupons-table-${self:provider.stage}'

resources:
  Resources:
    CouponsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

layers:
  tesseractAl2:
    path: ./tesseract
    compatibleRuntimes:
      - python3.8