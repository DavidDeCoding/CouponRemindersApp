service: coupon-reminders

package:
  individually: true

provider:
  name: aws
  runtime: python3.8
  region: us-west-1
  stage: ${opt:stage, "dev"}
  lambdaHashingVersion: "20201221"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - { "Fn::GetAtt": ["CouponsDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource:
        - { "Fn::Join": ["", [{"Fn::GetAtt": ["CouponsS3Bucket", "Arn"]}, "/*"]] }
  environment:
    COUPONS_TABLE: ${self:custom.couponsTableName}
    COUPONS_BUCKET: ${self:custom.couponsBucketName}
    DOMAIN_SUFFIX: 'coupon-reminders'
  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: ${request.header.Authorization}
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '${opt:region, self:provider.region}'
              - '.amazonaws.com/'
              - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

functions:
  app:
    package:
      include:
        - "coupon_reminders"
      exclude:
        - "requirements.txt"
        - "package.json"
        - "package-lock.json"
        - ".serverless/**"
        - ".virtualenv/**"
        - "node_modules/**"
        - ".pytest_cache"
        - "tests/**"
        - ".gitignore"
        - "poetry.lock"
        - "pyproject.toml"
        - "README.md"
        - "dist/**"
        - "tesseract/**"
    handler: coupon_reminders.main.handler
    environment:
      STAGE: ${self:provider.stage}
    events:
      - httpApi:
          path: /{proxy+}
          method: any
          authorizer: serviceAuthorizer
  coupon_processor:
    package:
      include:
        - "coupon_reminders"
      exclude:
        - "requirements.txt"
        - "package.json"
        - "package-lock.json"
        - ".serverless/**"
        - ".virtualenv/**"
        - "node_modules/**"
        - ".pytest_cache"
        - "tests/**"
        - ".gitignore"
        - "poetry.lock"
        - "pyproject.toml"
        - "README.md"
        - "dist/**"
        - "tesseract/**"
    handler: coupon_reminders.coupon_processor.handler
    timeout: 60
    environment:
      STAGE: ${self:provider.stage}
    layers:
      - { Ref: TesseractAl2LambdaLayer }
    events:
      - s3:
          bucket: ${self:custom.couponsBucketName}
          event: s3:ObjectCreated:*
          existing: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    dockerFile: Dockerfile
  couponsTableName: 'coupons-table-${self:provider.stage}'
  couponsBucketName: 'coupons-bucket-${self:provider.stage}'

resources:
  Resources:
    HttpApi:
      DependsOn: serviceUserPool
    CouponsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.couponsTableName}
    CouponsS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: ${self:custom.couponsBucketName}
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - http://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO
    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}

layers:
  tesseractAl2:
    path: ./tesseract
    compatibleRuntimes:
      - python3.8